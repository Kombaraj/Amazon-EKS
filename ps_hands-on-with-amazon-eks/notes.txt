git clone https://github.com/kombaraj/amazon-eks.git

chmod -R 700 amazon-eks

cd amazon-eks

# Install nano, eksctl, helm, kubectl, terraform
./pre-requisites.sh

cd ps_hands-on-with-amazon-eks

# Install EKS Cluster
./scripts-by-chapter/chapter-1.sh

# Create & Associate IAM OIDC Provider for our EKS Cluster
eksctl utils associate-iam-oidc-provider \
    --region us-east-1 \
    --cluster eks-acg \
    --approve

# Install AWS Loadbalancer Controller & create IAM Policy for ELB access
kubectl get deploy,svc,pod -n kube-system
cd ~/amazon-eks/ps_hands-on-with-amazon-eks/Infrastructure/k8s-tooling/load-balancer-controller
./create.sh
kubectl get deploy,svc,pod -n kube-system

# To make EKS Worker nodes to communicate with ALB Loadbalancer, map the IAM Policy ARN which just created to the NodeInstanceRole created from eks-acg-nodegroup Cloudformation templete
# So, Execute the script map-iam-policy-to-ng-instance-role.sh 
./map-iam-policy-to-ng-instance-role.sh

cd test
./run.sh

Validate ALB created and accessible
kubectl get deploy,svc,pod

## Secure Loadbalancing for EKS

# Create ACM SSL certificate
cd ~/amazon-eks/ps_hands-on-with-amazon-eks/Infrastructure/cloudformation/ssl-certificate
./create.sh
# Validate if certificate created in AWS Certificate Manager (ACM)

cd ~/amazon-eks/ps_hands-on-with-amazon-eks/Infrastructure/k8s-tooling/load-balancer-controller/test
./run-with-ssl.sh

# Update A Record in Route53 - MANUAL Way
# Route 53 => Create Record => "sample-app".999999999.realhandsonlabs.net 
#         => Alias => Select the AWS ALB Loadbalancer

Test the app: sample-app.999999999.realhandsonlabs.net 


# Update A Record in Route53 - AUTOMATED Way

Remove the manually created record entry in Route53


# Install External DNS

cd ~/amazon-eks/ps_hands-on-with-amazon-eks/Infrastructure/k8s-tooling/external-dns
./create.sh

# Check the external-dns pod and delete it to re-create
kubectl get pods
kubectl delete pod external-dns-XXXX
kubectl get pods

# Now validate Route53 if new entries for sample-app created
helm uninstall sample-app
# Loadbalancer will be destroyed now
# Route53 entries are not deleted yet. Delete it manually as 'upsert' mode in ExternalDNS is not working

## Create DynamoDB tables

# client-api table
cd ~/amazon-eks/ps_hands-on-with-amazon-eks/clients-api/infra/cloudformation
./create-dynamodb-table.sh

# inventory-api table
cd ~/amazon-eks/ps_hands-on-with-amazon-eks/inventory-api/infra/cloudformation
./create-dynamodb-table.sh

# renting-api table
cd ~/amazon-eks/ps_hands-on-with-amazon-eks/renting-api/infra/cloudformation
./create-dynamodb-table.sh

# resource-api table
cd ~/amazon-eks/ps_hands-on-with-amazon-eks/resource-api/infra/cloudformation
./create-dynamodb-table.sh

# IAM Policy mapped to NodeGroup Instance Role to get access to DynamoDB
cd ~/amazon-eks/ps_hands-on-with-amazon-eks/Infrastructure/k8s-tooling
./map-iam-policy-to-ng-instance-role.sh <<Node Instance Role>>

## Install Book Store App

# front-end
cd ~/amazon-eks/ps_hands-on-with-amazon-eks/front-end/infra/helm
./create.sh

# client-api 
cd ~/amazon-eks/ps_hands-on-with-amazon-eks/clients-api/infra/helm
./create.sh

# inventory-api
cd ~/amazon-eks/ps_hands-on-with-amazon-eks/inventory-api/infra/helm
./create.sh

# renting-api
cd ~/amazon-eks/ps_hands-on-with-amazon-eks/renting-api/infra/helm
./create.sh

# resource-api
cd ~/amazon-eks/ps_hands-on-with-amazon-eks/resource-api/infra/helm
./create.sh

kubectl get deploy,svc,pod -n development
Verify Route53 entries and validate the Book Store App

### EKS and CNI add-on

# Amazon VPC CNI add-on is configured while setup the cluster. Please validate in the AWS EKS Console in Add-ons section.
# aws-node-XXXX pods Amazon VPC CNI add-on running in all nodes
kubectl get pods -n kube-system
kubectl describe pod aws-node-XXXX -n kube-system

# Create new Secondary VPC CIDR and associate it to the existing VPC
cd ~/amazon-eks/ps_hands-on-with-amazon-eks/Infrastructure/k8s-tooling/cni
./setup.sh

# Terminate the existing worker nodes and wait for sometime to provision new worker nodes
# Check the Pods are now loaded in the Secondary CIDR

### The Principle of Least Privilege - IRSA





===>
Clean up
helm uninstall sample-app

1) external-dns service accoount cloudformation stack
2) Uninstall the sample-app
    helm ininstall sample-app 
3) ssl-certificate cloudformation stack
    aws cloudformation delete-stack --stack-name ssl-certificate
4) Uninstall External DNS
    helm uninstall external-dns
5) Uninstall AWS Loadbalancer Controller
    helm uninstall -n kube-system aws-load-balancer-controller
6) Uninstall NodeGroup
    aws cloudformation delete-stack --stack-name eksctl-eks-acg-nodegroup-eks-node-group
7) Uninstall EKS Cluster
    aws cloudformation delete-stack --stack-name eksctl-eks-acg-cluster


Route53 entries should be removed

